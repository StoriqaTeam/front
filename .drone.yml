pipeline:

###
# Test PR
###

  update_pr:
    image: plugins/git
    commands:
    - export BRANCH_SRC=origin/${DRONE_COMMIT_REFSPEC%%:*} BRANCH_DST=origin/${DRONE_BRANCH}
    - cp -rpf .git .git.bak
    - git config --global user.email "service@storiqa.com" && git config --global user.name "Storiqa Common"
    - git fetch && git checkout $BRANCH_SRC && git merge --no-commit $BRANCH_DST
    - rm -rf .git && mv -f .git.bak .git
    when:
      event: pull_request
      branch: [ master, release* ]
  test:
    image: node:9.9
    environment:
    - RUN_MODE=k8s
    commands:
    - rm -f yarn.lock || true
    - . ./.env.test
    - yarn -s --no-progress --non-interactive --production=false
    - yarn updateSchema
    - yarn relay
    - yarn ci
    when:
      event: pull_request
      branch: [ master, release* ]

###
# Build and deploy to nightly
###

  build4nightly:
    image: node:9.9
    commands:
    - . ./.env.nightly
    - rm -f yarn.lock || true
    - yarn -s --no-progress --non-interactive --production=false
    - yarn updateSchema
    - yarn relay
    - yarn build
    - yarn server:dist:build
    when:
      event: push
      branch: master
  node_package4nightly:
    image: plugins/docker
    repo: storiqateam/stq-node
    environment:
    - TIER=nightly
    tags:
    - nightly_${DRONE_BRANCH//\//_}
    - nightly_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.node
    secrets:
    - docker_username
    - docker_password
    when:
      event: [ push, tag ]
      branch: master
  static_package4nightly:
    image: plugins/docker
    repo: storiqateam/stq-static
    tags:
    - nightly_${DRONE_BRANCH//\//_}
    - nightly_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.static
    secrets:
    - docker_username
    - docker_password
    when:
      event: [ push, tag ]
      branch: master
  deploy2nightly:
    image: jackthestripper/drone_k8s_rollout:20180610
    object: front
    kind: deployment
    namespace: default
    img_names:
    - storiqateam/stq-node
    - storiqateam/stq-static
    img_cnts:
    - node
    - static
    img_tags:
    - nightly_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    - nightly_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    secrets:
    - source: k8s_nightly_ca
      target: k8s_ca
    - source: k8s_nightly_user
      target: k8s_user
    - source: k8s_nightly_token
      target: k8s_token
    - source: k8s_nightly_addr
      target: k8s_addr
    when:
      branch: master
      event: push

###
# Build and deploy to stable
###

  build4stable:
    image: node:9.9
    commands:
    - . ./.env.stable
    - rm -f yarn.lock || true
    - yarn -s --no-progress --non-interactive --production=false
    - yarn updateSchema
    - yarn relay
    - yarn build
    - yarn server:dist:build
    when:
      event: deployment
      environment: stable
      branch: master
  node_package4stable:
    image: plugins/docker
    repo: storiqateam/stq-node
    environment:
    - TIER=stable
    tags:
    - stable_${DRONE_BRANCH//\//_}
    - stable_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.node
    secrets:
    - docker_username
    - docker_password
    when:
      event: deployment
      environment: stable
      branch: master
  static_package4stable:
    image: plugins/docker
    repo: storiqateam/stq-static
    tags:
    - stable_${DRONE_BRANCH//\//_}
    - stable_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.static
    secrets:
    - docker_username
    - docker_password
    when:
      branch: master
      event: deployment
      environment: stable
  deploy2stable:
    image: jackthestripper/drone_k8s_rollout:20180610
    object: front
    kind: deployment
    namespace: default
    img_names:
    - storiqateam/stq-node
    - storiqateam/stq-static
    img_cnts:
    - node
    - static
    img_tags:
    - stable_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    - stable_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    secrets:
    - source: k8s_stable_ca
      target: k8s_ca
    - source: k8s_stable_user
      target: k8s_user
    - source: k8s_stable_token
      target: k8s_token
    - source: k8s_stable_addr
      target: k8s_addr
    when:
      branch: master
      event: deployment
      environment: stable

###
# Build and deploy to stage
###

  build4stage:
    image: node:9.9
    commands:
    - . ./.env.stage
    - rm -f yarn.lock || true
    - yarn -s --no-progress --non-interactive --production=false
    - yarn updateSchema
    - yarn relay
    - yarn build
    - yarn server:dist:build
    when:
      event: push
      branch: release*
  node_package4stage:
    image: plugins/docker
    repo: storiqateam/stq-node
    environment:
    - TIER=stage
    tags:
    - stage_${DRONE_BRANCH//\//_}
    - stage_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.node
    secrets:
    - docker_username
    - docker_password
    when:
      event: [ push, tag ]
      branch: release*
  static_package4stage:
    image: plugins/docker
    repo: storiqateam/stq-static
    tags:
    - stage_${DRONE_BRANCH//\//_}
    - stage_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.static
    secrets:
    - docker_username
    - docker_password
    when:
      event: [ push, tag ]
      branch: release*
  deploy2stage:
    image: jackthestripper/drone_k8s_rollout:20180610
    object: front
    kind: deployment
    namespace: default
    img_names:
    - storiqateam/stq-node
    - storiqateam/stq-static
    img_cnts:
    - node
    - static
    img_tags:
    - stage_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    - stage_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    secrets:
    - source: k8s_stage_ca
      target: k8s_ca
    - source: k8s_stage_user
      target: k8s_user
    - source: k8s_stage_token
      target: k8s_token
    - source: k8s_stage_addr
      target: k8s_addr
    when:
      branch: release*
      event: push

###
# Build and deploy to production
###

  build4production:
    image: node:9.9
    commands:
    - . ./.env.production
    - rm -f yarn.lock || true
    - yarn -s --no-progress --non-interactive --production=false
    - yarn updateSchema
    - yarn relay
    - yarn build
    - yarn server:dist:build
    when:
      event: deployment
      environment: production
      branch: release*
  node_package4production:
    image: plugins/docker
    repo: storiqateam/stq-node
    environment:
    - TIER=production
    tags:
    - prod_${DRONE_BRANCH//\//_}
    - prod_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.node
    secrets:
    - docker_username
    - docker_password
    when:
      event: deployment
      environment: production
      branch: release*
  static_package4production:
    image: plugins/docker
    repo: storiqateam/stq-static
    tags:
    - prod_${DRONE_BRANCH//\//_}
    - prod_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    dockerfile: docker/Dockerfile.static
    secrets:
    - docker_username
    - docker_password
    when:
      branch: release*
      event: deployment
      environment: production
  deploy2production:
    image: jackthestripper/drone_k8s_rollout:20180610
    object: front
    kind: deployment
    namespace: default
    img_names:
    - storiqateam/stq-node
    - storiqateam/stq-static
    img_cnts:
    - node
    - static
    img_tags:
    - prod_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    - prod_${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    secrets:
    - source: k8s_prod_ca
      target: k8s_ca
    - source: k8s_prod_user
      target: k8s_user
    - source: k8s_prod_token
      target: k8s_token
    - source: k8s_prod_addr
      target: k8s_addr
    when:
      branch: release*
      event: deployment
      environment: production

###
# Notifications and post-deploy ops
###

  notify_slack:
    image: plugins/slack
    webhook: https://hooks.slack.com/services/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
    channel: release
    icon_url: https://drone.io/favicon.ico
    username: cd.stq.cloud
    template: >
      {{#success build.status}}
        Build {{build.number}} for {{repo.name}} branch {{build.branch}} succeeded.
      {{else}}
        Build {{build.number}} for {{repo.name}} branch {{build.branch}} failed.
      {{/success}}
    when:
      event: [ push, deployment ]
      branch: [ master, release ]
      status: [ failure, success ]
